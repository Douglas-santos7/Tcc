<?php
include("../../database/conexao.php"); // Inclui a conexão com o banco de dados


if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $message = trim(strtolower($_POST['message'])); // Normaliza a mensagem para minúsculas
    $userId = 1; // Defina aqui o ID do usuário atual, isso pode ser passado pela sessão ou autenticação


    // Obtendo o nome do usuário
    $stmt = $conn->prepare("SELECT username FROM users WHERE id = ?");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($username);
    $stmt->fetch();
    $stmt->close();

    $username = ucfirst(strtolower($username));


    $responses = [
        'oi' => function () use ($username) {
            return gerarRespostaSaudacao($username, 'oi');
        },
        'ola' => function () use ($username) {
            return gerarRespostaSaudacao($username, 'ola');
        },
        'bom dia' => function () use ($username) {
            return gerarRespostaSaudacao($username, 'bom dia');
        },
        'boa tarde' => function () use ($username) {
            return gerarRespostaSaudacao($username, 'boa tarde');
        },
        'boa noite' => function () use ($username) {
            return gerarRespostaSaudacao($username, 'boa noite');
        },
        'saldo' => function () use ($conn, $userId) {
            return getSaldo($conn, $userId);
        },
        '1' => function () use ($conn, $userId) {
            return getSaldo($conn, $userId);
        },
        'economizar' => function () use ($conn, $userId) {
            return implode("\n", getDicasEconomizar($conn, $userId));
        },
        '2' => function () use ($conn, $userId) {
            return implode("\n", getDicasEconomizar($conn, $userId));
        },

        'investimento' => function () use ($conn, $userId) {
            return implode("\n", getDicasInvestir($conn, $userId));
        },
        '3' => function () use ($conn, $userId) {
            return implode("\n", getDicasInvestir($conn, $userId));
        },
        'resumo mensal' => function () use ($conn, $userId) {
            return getResumoMensal($conn, $userId);
        },
        '4' => function () use ($conn, $userId) {
            return getResumoMensal($conn, $userId);
        },
        'resumo diário' => function () use ($conn, $userId) {
            return getResumoDiario($conn, $userId);
        },
        '5' => function () use ($conn, $userId) {
            return getResumoDiario($conn, $userId);
        },
        'historico' => function () use ($conn, $userId) {
            return getHistoricoTransacoes($conn, $userId);
        },
        '6' => function () use ($conn, $userId) {
            return getHistoricoTransacoes($conn, $userId);
        },
        'análise' => function () use ($conn, $userId) {
            return getAnaliseGastos($conn, $userId);
        },
        '7' => function () use ($conn, $userId) {
            return getAnaliseGastos($conn, $userId);
        },
        'exportar' => function () use ($conn, $userId) {
            return exportarRelatorio($conn, $userId);
        },
        '8' => function () use ($conn, $userId) {
            return exportarRelatorio($conn, $userId);
        },
        'previsão financeira' => function () use ($conn, $userId) {
            return previsaoFinanceira($conn, $userId);
        },
        '9' => function () use ($conn, $userId) {
            return previsaoFinanceira($conn, $userId);
        },
        'comparação' => function () use ($conn, $userId) {
            return comparacaoGastosMensais($conn, $userId);
        },
        '10' => function () use ($conn, $userId) {
            return comparacaoGastosMensais($conn, $userId);
        },
        'desafio' => function () use ($conn, $userId) {
            return obterDesafioFinanceiroAleatorio($conn, $userId);
        },
        '11' => function () use ($conn, $userId) {
            return obterDesafioFinanceiroAleatorio($conn, $userId);
        },
        'planejamento mensal' => function () use ($conn, $userId) {
            return planejamentoMensal($conn, $userId);
        },
        '12' => function () use ($conn, $userId) {
            return planejamentoMensal($conn, $userId);
        },
        'obrigado' => 'De nada! Se precisar de mais ajuda, estou aqui.',
        'valeu' => 'De nada! Se precisar de mais ajuda, estou aqui.',
        'ajuda' => 'Claro! Estou aqui para ajudar com questões financeiras. O que você gostaria de saber?',
        'como funciona' => 'Posso ajudá-lo a entender orçamentos, investimentos e muito mais!'
    ];


    // Função para gerar a resposta de saudação
    function gerarRespostaSaudacao($username, $saudacao)
    {
        // Personaliza a resposta com base na saudação
        switch (strtolower($saudacao)) {
            case 'bom dia':
                $mensagem = "Bom dia, $username! Como posso ajudar você com suas finanças?\n";
                break;
            case 'boa tarde':
                $mensagem = "Boa tarde, $username! Como posso ajudar você com suas finanças?\n";
                break;
            case 'boa noite':
                $mensagem = "Boa noite, $username! Como posso ajudar você com suas finanças?\n";
                break;
            case 'oi':
            case 'ola':
                $mensagem = "Olá, $username! Como posso ajudar você com suas finanças?\n";
                break;
            default:
                $mensagem = "Olá, $username! Como posso ajudar você com suas finanças?\n";
                break;
        }


        // Retorna as opções de ajuda
        return $mensagem . "Escolha uma das opções abaixo:<br>" .
            "1. Saldo<br>" .
            "2. Dicas de Economia<br>" .
            "3. Dicas de Investimento<br>" .
            "4. Resumo Mensal<br>" .
            "5. Resumo Diário<br>" .
            "6. Histórico de Transações<br>" .
            "7. Análise de Gastos<br>" .
            "8. Exportar Relatório<br>" .
            "9. Previsão Financeira com Base no Histórico<br>" .
            "10. Comparação de Gastos Mensais<br>" .
            "11. Desafios<br>" .
            "12. Planejamento Mensal<br>";
    }


    // Mapeamento de sinônimos para palavras-chave
    $synonyms = [
        'saldo' => [
            'quanto tenho',
            'meu saldo',
            'saldo atual',
            'quanto há na conta',
            'valor disponível',
            'dinheiro disponível',
            'quanto posso gastar',
            'saldo da conta',
            'quanto resta',
            'quantos reais tenho',
            'saldo bancário',
            'meu dinheiro'
        ],
        'economizar' => [
            'dicas de economia',
            'como economizar',
            'formas de poupar',
            'como poupar',
            'dicas para gastar menos',
            'reduzir despesas',
            'guardar dinheiro',
            'melhorar finanças',
            'cortar gastos',
            'dicas financeiras',
            'economizar dinheiro',
            'gastar menos',
            'dicas para poupar'
        ],
        'investimento' => [
            'dicas de investimento',
            'como investir',
            'onde investir',
            'investir dinheiro',
            'boas práticas de investimento',
            'o que é um bom investimento',
            'melhores investimentos',
            'dicas para crescer dinheiro',
            'aplicações financeiras',
            'investir com segurança',
            'investimentos fáceis',
            'como aplicar dinheiro'
        ],
        'resumo mensal' => [
            'meu resumo mensal',
            'resumo do mês',
            'desempenho mensal',
            'dados do mês',
            'balanço mensal',
            'relatório mensal',
            'análise do mês',
            'fechamento do mês',
            'gastos mensais',
            'lucros e despesas do mês',
            'resumo financeiro do mês'
        ],
        'resumo diário' => [
            'meu resumo diário',
            'resumo de hoje',
            'balanço de hoje',
            'dados do dia',
            'relatório diário',
            'movimentações do dia',
            'resumo financeiro diário',
            'o que gastei hoje',
            'gastos do dia',
            'ganhos de hoje',
            'atividade do dia'
        ],
        'ajuda' => [
            'preciso de ajuda',
            'me ajuda',
            'como faço isso',
            'dúvida',
            'não sei usar',
            'socorro',
            'me explique isso',
            'tenho uma dúvida',
            'ajude-me',
            'o que fazer',
            'preciso de suporte',
            'não entendi',
            'me oriente'
        ],
        'como funciona' => [
            'como isso funciona',
            'me explique',
            'como utilizar',
            'como operar',
            'modo de uso',
            'me mostra como',
            'para que serve',
            'o que isso faz',
            'como usar',
            'explica o funcionamento',
            'detalhes sobre isso',
            'como funciona o sistema'
        ],
        'oi' => [
            'oi',
            'olá',
            'olá tudo bem',
            'bom dia',
            'boa tarde',
            'boa noite',
            'e aí',
            'alô',
            'tudo bem',
            'como vai',
            'opa',
            'oi tudo certo',
            'saudações',
            'hey',
            'oii',
            'fala ai'
        ],
        'planejamento mensal' => [
           'planejar'
        ],

    ];


    // Lista de tópicos permitidos
    $allowedTopics = [
        "1. Saldo<br>" .
            "2. Dicas de Economia<br>" .
            "3. Dicas de Investimento<br>" .
            "4. Resumo Mensal<br>" .
            "5. Resumo Diário<br>" .
            "6. Histórico de Transações<br>" .
            "7. Análise de Gastos<br>" .
            "8. Exportar Relatório<br>" .
            "9. Previsão Financeira com Base no Histórico<br>" .
            "10. Comparação de Gastos Mensais<br>" .
            "11. Desafios<br>" .
            "12. Planejamento Mensal<br>"
    ];


    // Gera a lista de tópicos como uma string
    $topics = implode(', ', $allowedTopics);


    // Inicializa variáveis de controle
    $responseFound = false;
    $responseMessage = '';


    // Verifica se a mensagem contém algum dos sinônimos
    foreach ($synonyms as $key => $synonymList) {
        foreach ($synonymList as $synonym) {
            if (strpos($message, $synonym) !== false) {
                if (array_key_exists($key, $responses)) {
                    $response = $responses[$key];
                    $responseMessage = is_callable($response) ? $response() : $response;
                    $responseFound = true;
                    break 2; // Break out of both loops
                }
            }
        }
    }


    // Se não encontrou uma correspondência, verifica diretamente por palavras-chave
    if (!$responseFound && isset($responses[$message])) {
        $response = $responses[$message];
        $responseMessage = is_callable($response) ? $response() : $response;
        $responseFound = true;
    }


    // Resposta padrão caso não tenha encontrado uma correspondência
    if (!$responseFound) {
        // Concatena os tópicos na resposta padrão com <br> para quebra de linha
        $responseMessage = 'Desculpe, não entendi. Podemos falar sobre os seguintes assuntos:<br>';

        // Adiciona os tópicos com uma quebra de linha HTML entre cada um
        foreach ($allowedTopics as $topic) {
            $responseMessage .= $topic . '<br>';
        }
    }


    // Armazena a mensagem e resposta no histórico
    $stmt = $conn->prepare("INSERT INTO historico_conversas (user_id, mensagem, resposta) VALUES (?, ?, ?)");
    $stmt->bind_param("iss", $userId, $message, $responseMessage);
    $stmt->execute();
    $stmt->close();


    // Retorna a resposta ao usuário
    echo $responseMessage;
}

// Função para obter saldo do usuário
function getSaldo($conn, $userId)
{
    // Somar receitas
    $stmtReceitas = $conn->prepare("SELECT SUM(valor) FROM transacoes WHERE usuario_id = ? AND tipo = 'receita'");
    $stmtReceitas->bind_param("i", $userId);
    $stmtReceitas->execute();
    $stmtReceitas->bind_result($totalReceitas);
    $stmtReceitas->fetch();
    $stmtReceitas->close();

    // Somar despesas
    $stmtDespesas = $conn->prepare("SELECT SUM(valor) FROM transacoes WHERE usuario_id = ? AND tipo = 'despesa'");
    $stmtDespesas->bind_param("i", $userId);
    $stmtDespesas->execute();
    $stmtDespesas->bind_result($totalDespesas);
    $stmtDespesas->fetch();
    $stmtDespesas->close();

    // Calcular saldo
    $saldo = ($totalReceitas ?? 0) - ($totalDespesas ?? 0);

    // Verificando se o saldo é 0
    if ($saldo == 0) {
        return "Parece que você não tem saldo registrado. Que tal adicionar uma receita?";
    }

    return "Seu saldo atual é R$ " . number_format($saldo, 2, ',', '.');
}

// Função para obter dicas de economia com base no saldo do usuário
function getDicasEconomizar($conn, $userId)
{
    // Obter o saldo atual do usuário
    $stmt = $conn->prepare("SELECT SUM(valor) FROM transacoes WHERE usuario_id = ?");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($saldo);
    $stmt->fetch();
    $stmt->close();

    // Retornar dicas com base no saldo
    if ($saldo < 100) {
        return [
            "Cozinhe em casa ao invés de pedir delivery. Receitas econômicas podem ser encontradas em sites como TudoGostoso ou Panelinha.",
            "Faça compras no supermercado usando aplicativos como **Meu Carrinho** ou **Zoom** para comparar preços e evitar gastos por impulso.",
            "Busque cupons de desconto em sites como **Cuponomia** ou **Méliuz** antes de realizar compras online.",
            "Venda itens usados que não utiliza mais em plataformas como **OLX** ou **Enjoei** para gerar uma renda extra."
        ];
    } elseif ($saldo < 500) {
        return [
            "Use o aplicativo **Buscapé** para comparar preços de produtos eletrônicos e evitar pagar mais caro.",
            "Revise assinaturas desnecessárias no **Google Subscriptions** ou no painel de controle do **iTunes**.",
            "Entre em contato com provedores de serviços, como **Vivo** ou **Claro**, para negociar tarifas melhores de internet ou celular.",
            "Crie um orçamento mensal com ferramentas como **Guiabolso** ou **Mobills** para identificar gastos desnecessários e cortá-los."
        ];
    } else {
        return [
            "Comece a investir usando aplicativos como **XP Investimentos** ou **Rico** para explorar opções de renda fixa ou variável.",
            "Reserve uma parte do saldo para poupança de emergência utilizando contas digitais como **Nubank** ou **C6 Bank**, que oferecem rendimentos melhores do que a poupança tradicional.",
            "Invista em CDBs, LCIs ou Fundos de Investimento em plataformas como **Easynvest** ou **BTG Pactual Digital**.",
            "Pesquise sobre investimentos de longo prazo, como previdência privada, usando simuladores em sites como o do **Banco do Brasil** ou **Itaú**."
        ];
    }
}


// Função para obter dicas de investimento com base no valor do usuário
function getDicasInvestir($conn, $userId)
{
    // Consulta para obter o saldo ou valor total de investimentos do usuário
    $stmt = $conn->prepare("SELECT SUM(valor) FROM transacoes WHERE usuario_id = ?");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($saldo);
    $stmt->fetch();
    $stmt->close();

    // Dicas com base no saldo do usuário
    if ($saldo < 1000) {
        return [
            "Abra uma conta no **Nubank** ou **C6 Bank** para começar a investir em contas com rendimento automático acima da poupança.",
            "Utilize plataformas como **Tesouro Direto** ou **Easynvest** para iniciar com aplicações seguras no Tesouro Selic.",
            "Explore fundos de investimento acessíveis em corretoras como **XP Investimentos** ou **Rico**.",
            "Participe de programas de cashback como o **Méliuz**, economizando enquanto investe.",
            "Aprenda sobre investimentos com cursos gratuitos em plataformas como **Fundação Bradesco** ou vídeos no **YouTube** (ex.: canal **Primo Rico**)."
        ];
    } elseif ($saldo < 5000) {
        return [
            "Diversifique sua carteira investindo em **ETFs** disponíveis no **BTG Pactual Digital** ou **Clear Corretora**.",
            "Invista em fundos multimercados ou de renda fixa em plataformas como **Órama** ou **ModalMais**.",
            "Considere abrir conta em corretoras como **Inter Invest** que oferecem taxas competitivas e funcionalidades intuitivas.",
            "Use aplicativos como **Kinvo** ou **Trademap** para monitorar o desempenho da sua carteira de investimentos.",
            "Acompanhe relatórios de análise gratuitos oferecidos por corretoras como **Toro Investimentos** para tomar decisões informadas."
        ];
    } else {
        return [
            "Invista em ações de empresas sólidas usando plataformas como **BTG+**, **NuInvest** ou **Rico**.",
            "Explore fundos imobiliários (FIIs) disponíveis em corretoras como **Easynvest** ou **XP Investimentos**.",
            "Participe de crowdfunding de startups em plataformas como **Kria** ou **EqSeed**.",
            "Monte uma carteira diversificada com ativos de diferentes setores utilizando o **Trademap** para balancear os riscos.",
            "Consulte um assessor financeiro em corretoras como **Genial Investimentos** ou **Guide** para alinhar sua estratégia com seus objetivos de longo prazo.",
            "Compare taxas de administração e performance antes de investir em produtos como previdência privada ou fundos exclusivos."
        ];
    }
}

// Função para obter resumo mensal
function getResumoMensal($conn, $userId)
{
    // Obter receita mensal
    $stmt = $conn->prepare("SELECT SUM(valor) FROM transacoes WHERE usuario_id = ? AND tipo = 'receita' AND MONTH(data) = MONTH(CURRENT_DATE())");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($totalReceitaMensal);
    $stmt->fetch();
    $stmt->close();
    $totalReceitaMensal = $totalReceitaMensal ?? 0;

    // Obter despesa mensal
    $stmt = $conn->prepare("SELECT SUM(valor) FROM transacoes WHERE usuario_id = ? AND tipo = 'despesa' AND MONTH(data) = MONTH(CURRENT_DATE())");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($totalDespesaMensal);
    $stmt->fetch();
    $stmt->close();
    $totalDespesaMensal = $totalDespesaMensal ?? 0;

    // Formatar os valores para exibição
    $receitaFormatada = number_format($totalReceitaMensal, 2, ',', '.');
    $despesaFormatada = number_format($totalDespesaMensal, 2, ',', '.');

    // Retornar o resumo mensal
    return "Resumo mensal:<br>" .
           "Receita total: R$ " . $receitaFormatada . "<br>" .
           "Despesa total: R$ " . $despesaFormatada;
}

// Função para obter resumo diário
function getResumoDiario($conn, $userId)
{
    // Obter receita diária
    $stmt = $conn->prepare("SELECT SUM(valor) FROM transacoes WHERE usuario_id = ? AND tipo = 'receita' AND DATE(data) = CURDATE()");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($totalReceitaDiaria);
    $stmt->fetch();
    $stmt->close();
    $totalReceitaDiaria = $totalReceitaDiaria ?? 0;

    // Obter despesa diária
    $stmt = $conn->prepare("SELECT SUM(valor) FROM transacoes WHERE usuario_id = ? AND tipo = 'despesa' AND DATE(data) = CURDATE()");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($totalDespesaDiaria);
    $stmt->fetch();
    $stmt->close();
    $totalDespesaDiaria = $totalDespesaDiaria ?? 0;

    // Formatar os valores para exibição
    $receitaFormatada = number_format($totalReceitaDiaria, 2, ',', '.');
    $despesaFormatada = number_format($totalDespesaDiaria, 2, ',', '.');

    // Retornar o resumo diário
    return "Resumo diário:<br>" .
           "Receita total: R$ " . $receitaFormatada . "<br>" .
           "Despesa total: R$ " . $despesaFormatada;
}



function getHistoricoTransacoes($conn, $userId)
{
    $stmt = $conn->prepare("SELECT tipo, valor, data FROM transacoes WHERE usuario_id = ? ORDER BY data DESC");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($tipo, $valor, $data);

    $historico = [];
    while ($stmt->fetch()) {
        $historico[] = "$data - $tipo: R$ " . number_format($valor, 2, ',', '.');
    }
    $stmt->close();

    if (empty($historico)) {
        return "Você não tem transações registradas.";
    }
    return implode("\n", $historico);
}

function getAnaliseGastos($conn, $userId)
{
    $stmt = $conn->prepare("SELECT c.nome, SUM(t.valor) AS total FROM transacoes t JOIN categorias c ON t.categoria_id = c.id WHERE t.usuario_id = ? GROUP BY c.nome");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($categoria, $total);

    $analise = [];
    while ($stmt->fetch()) {
        $analise[] = "$categoria: R$ " . number_format($total, 2, ',', '.');
    }
    $stmt->close();

    if (empty($analise)) {
        return "Nenhum gasto registrado.";
    }
    return implode("\n", $analise);
}

function exportarRelatorio($conn, $userId)
{
    $stmt = $conn->prepare("SELECT username FROM users WHERE id = ?");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($username);
    $stmt->fetch();
    $stmt->close();

    // Obter histórico de transações
    $historico = getHistoricoTransacoes($conn, $userId);

    // Verifica se o histórico não está vazio
    if (empty($historico)) {
        return "Nenhum dado disponível para exportar.";
    }

    // Cria um arquivo temporário em memória
    $tempFile = tempnam(sys_get_temp_dir(), 'relatorio_') . ".txt";
    file_put_contents($tempFile, $historico);

    // Montar a URL completa para download
    $urlArquivo = "http://localhost/chat/" . basename($tempFile);

    // Criar um link para o download
    $html = "Relatório gerado. Você pode <a href='$urlArquivo' download>baixar aqui</a>.";

    return $html;
}



function previsaoFinanceira($conn, $userId, $meses = 3)
{
    // Consulta SQL para calcular a média de receitas e despesas
    $stmt = $conn->prepare("
        SELECT tipo, AVG(valor) AS media 
        FROM transacoes 
        WHERE usuario_id = ? 
        GROUP BY tipo
    ");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($tipo, $media);

    // Array para armazenar as médias de receitas e despesas
    $previsao = [];
    while ($stmt->fetch()) {
        $previsao[$tipo] = $media; // Armazena a média de 'receita' ou 'despesa'
    }
    $stmt->close();

    // Verificar se as médias de receitas e despesas foram encontradas
    $gastosEstimados = isset($previsao['despesa']) ? $previsao['despesa'] * $meses : 0;
    $receitasEstimadas = isset($previsao['receita']) ? $previsao['receita'] * $meses : 0;

    // Se não houver receita nem despesa registrada
    if ($gastosEstimados == 0 && $receitasEstimadas == 0) {
        return "Não há dados suficientes de transações para calcular a previsão financeira.";
    }

    // Calcular o saldo estimado (receitas - despesas)
    $saldoEstimado = $receitasEstimadas - $gastosEstimados;

    // Retornar a previsão financeira formatada
    return "Previsão para os próximos $meses meses:\n" . 
           "Receitas: R$ " . number_format($receitasEstimadas, 2, ',', '.') . "\n" . 
           "Gastos: R$ " . number_format($gastosEstimados, 2, ',', '.') . "\n" . 
           "Saldo Estimado: R$ " . number_format($saldoEstimado, 2, ',', '.');
}

function comparacaoGastosMensais($conn, $userId)
{
    $stmt = $conn->prepare("
    SELECT DATE_FORMAT(data, '%M de %Y') AS mes, SUM(valor) AS total 
    FROM transacoes 
    WHERE usuario_id = ? AND tipo = 'despesa' 
    GROUP BY YEAR(data), MONTH(data) 
    ORDER BY data DESC 
    LIMIT 2
");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($mes, $total);

    $gastos = [];
    while ($stmt->fetch()) {
        $gastos[] = ['mes' => $mes, 'total' => $total];
    }
    $stmt->close();

    if (count($gastos) < 2) {
        return "Dados insuficientes para comparação.";
    }

    $diferenca = $gastos[0]['total'] - $gastos[1]['total'];
    $resultado = $diferenca >= 0 ? "aumento" : "redução";

    return
        "Comparação de Gastos:\n" .
        "{$gastos[0]['mes']}: R$ " . number_format($gastos[0]['total'], 2, ',', '.') . "\n" .
        "{$gastos[1]['mes']}: R$ " . number_format($gastos[1]['total'], 2, ',', '.') . "\n" .
        "Diferença: R$ " . number_format(abs($diferenca), 2, ',', '.') . " ($resultado).";
}

function obterDesafioFinanceiroAleatorio($conn, $userId)
{
    $desafios = [
        "Economize R$ 100 em um mês",
        "Reduza suas despesas com alimentação em 20% neste mês",
        "Economize R$ 50 em compras de supermercado",
        "Tente não gastar nada por uma semana",
        "Use transporte público em vez de carro por uma semana",
        "Desafie-se a cancelar uma assinatura mensal que você não usa",
        "Compre apenas itens essenciais por um mês",
        "Estabeleça um limite de gastos e siga-o por 30 dias",
        "Aproveite promoções e compre apenas produtos em oferta durante um mês",
        "Tente cozinhar em casa ao invés de comer fora por uma semana",
        "Monitore seus gastos diários em um aplicativo por um mês",
        "Desafie-se a economizar R$ 200 em um mês e veja como se sai",
        "Crie um orçamento mensal e cumpra-o rigorosamente",
        "Evite compras por impulso, e faça uma lista antes de ir ao mercado",
        "Participe de um workshop de finanças pessoais online",
        "Faça um dia sem gastar nada por uma semana e anote suas reflexões",
        "Estabeleça um desafio de poupança com um amigo e compare resultados"
    ];

    $desafioAleatorio = $desafios[array_rand($desafios)];
    return $desafioAleatorio;
}

function planejamentoMensal($conn, $userId)
{
    // Obtém o saldo atual do usuário
    $stmt = $conn->prepare("SELECT saldo FROM users WHERE id = ?");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($saldoAtual);
    $stmt->fetch();
    $stmt->close();

    if ($saldoAtual === null) {
        return "Não foi possível obter o saldo atual.";
    }

    // Obtém a receita total do mês atual
    $stmt = $conn->prepare("
        SELECT SUM(valor) FROM transacoes 
        WHERE usuario_id = ? AND tipo = 'receita' AND MONTH(data) = MONTH(CURDATE()) AND YEAR(data) = YEAR(CURDATE())
    ");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($receitaMensal);
    $stmt->fetch();
    $stmt->close();
    $receitaMensal = $receitaMensal ?? 0;

    // Obtém a despesa total do mês atual
    $stmt = $conn->prepare("
        SELECT SUM(valor) FROM transacoes 
        WHERE usuario_id = ? AND tipo = 'despesa' AND MONTH(data) = MONTH(CURDATE()) AND YEAR(data) = YEAR(CURDATE())
    ");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $stmt->bind_result($despesaMensal);
    $stmt->fetch();
    $stmt->close();
    $despesaMensal = $despesaMensal ?? 0;

    // Verifica vencimentos próximos (nos próximos 7 dias)
    $stmt = $conn->prepare("
        SELECT descricao, data_vencimento, valor 
        FROM vencimentos 
        WHERE usuario_id = ? AND data_vencimento BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY)
        ORDER BY data_vencimento ASC
    ");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $result = $stmt->get_result();
    $vencimentosProximos = [];
    while ($row = $result->fetch_assoc()) {
        $vencimentosProximos[] = $row;
    }
    $stmt->close();

    // Calcula o saldo disponível para o restante do mês
    $diasNoMes = date("t");
    $diaAtual = date("j");
    $diasRestantes = $diasNoMes - $diaAtual;
    $saldoDisponivel = $saldoAtual + $receitaMensal - $despesaMensal;

    // Média de gastos diários até agora
    $mediaGastoDiarioAtual = $diaAtual > 0 ? $despesaMensal / $diaAtual : 0;

    // Planejamento sugerido
    $gastoDiarioSugerido = $diasRestantes > 0 ? $saldoDisponivel / $diasRestantes : $saldoDisponivel;
    $saldoEstimadoFinalMes = $saldoDisponivel - ($gastoDiarioSugerido * $diasRestantes);

    // Formata os valores para exibição
    $saldoFormatado = number_format($saldoDisponivel, 2, ',', '.');
    $gastoDiarioFormatado = number_format(max(0, $gastoDiarioSugerido), 2, ',', '.');
    $mediaGastoDiarioFormatado = number_format($mediaGastoDiarioAtual, 2, ',', '.');
    $saldoFinalEstimadoFormatado = number_format($saldoEstimadoFinalMes, 2, ',', '.');
    $receitaFormatada = number_format($receitaMensal, 2, ',', '.');
    $despesaFormatada = number_format($despesaMensal, 2, ',', '.');

    // Consulta as metas financeiras do usuário
    $stmt = $conn->prepare("SELECT nome_meta, valor_alvo, valor_atual, prazo FROM metas_usuario WHERE id_usuario = ?");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $result = $stmt->get_result();
    $metas = [];
    while ($row = $result->fetch_assoc()) {
        $metas[] = $row;
    }
    $stmt->close();

    // Calcula o progresso de cada meta
    $metasComProgresso = [];
    foreach ($metas as $meta) {
        $progresso = 0;
        if ($meta['valor_alvo'] > 0) {
            // Calcula o progresso com base no valor atual da meta
            $progresso = min(100, ($meta['valor_atual'] / $meta['valor_alvo']) * 100);  // Calcula progresso com o valor atual
        }
        $metasComProgresso[] = [
            'nome_meta' => $meta['nome_meta'],
            'valor_alvo' => number_format($meta['valor_alvo'], 2, ',', '.'),
            'valor_atual' => number_format($meta['valor_atual'], 2, ',', '.'),
            'prazo' => date("d/m/Y", strtotime($meta['prazo'])),
            'progresso' => number_format($progresso, 2, ',', '.')
        ];
    }

    // Monta a mensagem do planejamento em formato HTML
    $mensagem = 
        "Planejamento Mensal:<br>" . 
        "Saldo disponível para o mês: R$ " . $saldoFormatado . "<br>" . 
        "Receita total do mês: R$ " . $receitaFormatada . "<br>" . 
        "Despesa total do mês: R$ " . $despesaFormatada . "<br>" . 
        "Dias restantes no mês: " . $diasRestantes . " dias<br>" . 
        "Média de gastos diários até agora: R$ " . $mediaGastoDiarioFormatado . "<br>" . 
        "Gasto diário sugerido: R$ " . $gastoDiarioFormatado . "<br>" . 
        "Saldo estimado ao final do mês: R$ " . $saldoFinalEstimadoFormatado . "<br>";
        
    // Exibe os vencimentos nos próximos 7 dias
    if (!empty($vencimentosProximos)) {
        $mensagem .= "Vencimentos nos próximos 7 dias:<br>";
        foreach ($vencimentosProximos as $vencimento) {
            $mensagem .= "- " . $vencimento['descricao'] . " em " . date("d/m/Y", strtotime($vencimento['data_vencimento'])) . ": R$ " . number_format($vencimento['valor'], 2, ',', '.') . "<br>";
        }
    }

    return $mensagem;
}